"use strict";(self.webpackChunksit_fuse_website=self.webpackChunksit_fuse_website||[]).push([[8587],{7768:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"tutorials/wildfire-detection","title":"Wildfire Detection Tutorial","description":"This tutorial demonstrates how to use SIT-FUSE for automated wildfire and smoke plume detection using multi-sensor satellite imagery.","source":"@site/docs/tutorials/wildfire-detection.md","sourceDirName":"tutorials","slug":"/tutorials/wildfire-detection","permalink":"/SIT_FUSE/docs/tutorials/wildfire-detection","draft":false,"unlisted":false,"editUrl":"https://github.com/yunks128/SIT_FUSE/tree/main/docs/docs/tutorials/wildfire-detection.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Installation Guide","permalink":"/SIT_FUSE/docs/installation/setup"},"next":{"title":"Algal Bloom Analysis Tutorial","permalink":"/SIT_FUSE/docs/tutorials/algal-bloom-analysis"}}');var a=i(4848),r=i(8453);const s={},o="Wildfire Detection Tutorial",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Workflow Overview",id:"workflow-overview",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Data Requirements",id:"data-requirements",level:2},{value:"Data Flow Diagram",id:"data-flow-diagram",level:3},{value:"Step 1: Environment Setup",id:"step-1-environment-setup",level:2},{value:"Step 2: Define Study Area and Time Period",id:"step-2-define-study-area-and-time-period",level:2},{value:"Step 3: Data Acquisition",id:"step-3-data-acquisition",level:2},{value:"Step 4: Data Preprocessing",id:"step-4-data-preprocessing",level:2},{value:"Step 5: Model Initialization",id:"step-5-model-initialization",level:2},{value:"Step 6: Fire Detection",id:"step-6-fire-detection",level:2},{value:"Step 7: Results Visualization",id:"step-7-results-visualization",level:2},{value:"Step 8: Export Results",id:"step-8-export-results",level:2},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Real-time Processing",id:"real-time-processing",level:3},{value:"Cross-validation with Ground Truth",id:"cross-validation-with-ground-truth",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Performance Optimization",id:"performance-optimization",level:3},{value:"Next Steps",id:"next-steps",level:2},{value:"Resources",id:"resources",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"wildfire-detection-tutorial",children:"Wildfire Detection Tutorial"})}),"\n",(0,a.jsx)(n.p,{children:"This tutorial demonstrates how to use SIT-FUSE for automated wildfire and smoke plume detection using multi-sensor satellite imagery."}),"\n",(0,a.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(n.p,{children:"Wildfire detection is one of SIT-FUSE's flagship applications, combining thermal infrared data, visible imagery, and meteorological information to provide rapid and accurate fire detection across large geographic areas."}),"\n",(0,a.jsx)(n.h2,{id:"workflow-overview",children:"Workflow Overview"}),"\n",(0,a.jsx)(n.mermaid,{value:"flowchart TD\n    Start([Start Tutorial]) --\x3e Setup[Environment Setup]\n    Setup --\x3e AOI[Define Study Area]\n    AOI --\x3e Data[Data Acquisition]\n    Data --\x3e Process[Data Preprocessing]\n    Process --\x3e Model[Model Initialization]\n    Model --\x3e Detect[Fire Detection]\n    Detect --\x3e Visualize[Results Visualization]\n    Visualize --\x3e Export[Export Results]\n    Export --\x3e End([Complete])\n    \n    style Start fill:#e8f5e8\n    style End fill:#f0f8ff\n    style Detect fill:#ffe6e6"}),"\n",(0,a.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"SIT-FUSE installed with GPU support (recommended)"}),"\n",(0,a.jsx)(n.li,{children:"NASA Earthdata account credentials"}),"\n",(0,a.jsx)(n.li,{children:"Basic familiarity with Python and remote sensing concepts"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"data-requirements",children:"Data Requirements"}),"\n",(0,a.jsx)(n.p,{children:"For this tutorial, we'll use:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"MODIS thermal bands"})," (Terra/Aqua satellites)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"VIIRS active fire data"})," (Suomi-NPP/NOAA-20)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"GOES-16/17 ABI data"})," (geostationary satellites)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"ERA5 meteorological reanalysis"})," (wind speed/direction)"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"data-flow-diagram",children:"Data Flow Diagram"}),"\n",(0,a.jsx)(n.mermaid,{value:'graph LR\n    subgraph "Satellite Data Sources"\n        MODIS[MODIS Terra/Aqua<br/>Thermal IR Bands]\n        VIIRS[VIIRS NPP/NOAA-20<br/>Active Fire Product]\n        GOES[GOES-16/17<br/>ABI Full Disk]\n        ERA5[ERA5 Reanalysis<br/>Wind/Weather]\n    end\n    \n    subgraph "Data Processing"\n        Download[Data Download]\n        Align[Temporal/Spatial Alignment]\n        Calibrate[Radiometric Calibration]\n        Mask[Cloud/Quality Masking]\n    end\n    \n    subgraph "Fire Detection"\n        Hotspot[Thermal Hotspot Detection]\n        Context[Contextual Analysis]\n        Validation[Multi-sensor Validation]\n        Tracking[Temporal Tracking]\n    end\n    \n    MODIS --\x3e Download\n    VIIRS --\x3e Download\n    GOES --\x3e Download\n    ERA5 --\x3e Download\n    \n    Download --\x3e Align\n    Align --\x3e Calibrate\n    Calibrate --\x3e Mask\n    \n    Mask --\x3e Hotspot\n    Mask --\x3e Context\n    Hotspot --\x3e Validation\n    Context --\x3e Validation\n    Validation --\x3e Tracking'}),"\n",(0,a.jsx)(n.h2,{id:"step-1-environment-setup",children:"Step 1: Environment Setup"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import sit_fuse\nfrom sit_fuse.applications import wildfire\nfrom sit_fuse.data import SatelliteDataLoader\nfrom sit_fuse.preprocessing import MultiSensorProcessor\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom datetime import datetime, timedelta\n\n# Configure the framework\nconfig = sit_fuse.Config(\n    cache_dir="./wildfire_data",\n    use_gpu=True,\n    num_workers=4\n)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"step-2-define-study-area-and-time-period",children:"Step 2: Define Study Area and Time Period"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Define area of interest (California wine country)\naoi = {\n    'bbox': [-123.5, 38.0, -122.0, 39.0],  # [west, south, east, north]\n    'crs': 'EPSG:4326'\n}\n\n# Define time period (during 2020 fire season)\nstart_date = datetime(2020, 8, 15)\nend_date = datetime(2020, 8, 25)\n\nprint(f\"Study area: {aoi['bbox']}\")\nprint(f\"Time period: {start_date} to {end_date}\")\n"})}),"\n",(0,a.jsx)(n.h2,{id:"step-3-data-acquisition",children:"Step 3: Data Acquisition"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Initialize data loader\ndata_loader = SatelliteDataLoader(config)\n\n# Download multi-sensor data\ndatasets = data_loader.load_wildfire_data(\n    aoi=aoi,\n    start_date=start_date,\n    end_date=end_date,\n    sensors=['modis', 'viirs', 'goes-16', 'era5']\n)\n\nprint(f\"Downloaded {len(datasets)} datasets\")\nfor sensor, data in datasets.items():\n    print(f\"  {sensor}: {data.shape} time steps\")\n"})}),"\n",(0,a.jsx)(n.h2,{id:"step-4-data-preprocessing",children:"Step 4: Data Preprocessing"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Initialize multi-sensor processor\nprocessor = MultiSensorProcessor(config)\n\n# Preprocess and align all sensors\nprocessed_data = processor.process_wildfire_stack(\n    datasets,\n    target_resolution=1000,  # 1km spatial resolution\n    temporal_window=1        # 1-hour temporal alignment\n)\n\n# Display processing results\nprint("Processed data structure:")\nfor key, value in processed_data.items():\n    print(f"  {key}: {value.shape}")\n'})}),"\n",(0,a.jsx)(n.h2,{id:"step-5-model-initialization",children:"Step 5: Model Initialization"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Load pre-trained wildfire detection model\nwildfire_model = wildfire.WildfireDetector.from_pretrained(\n    \'sit-fuse-wildfire-v2.1\',\n    config=config\n)\n\n# Display model information\nprint(f"Model: {wildfire_model.name}")\nprint(f"Input channels: {wildfire_model.input_channels}")\nprint(f"Spatial resolution: {wildfire_model.native_resolution}m")\n'})}),"\n",(0,a.jsx)(n.h2,{id:"step-6-fire-detection",children:"Step 6: Fire Detection"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Run wildfire detection\nresults = wildfire_model.detect(\n    processed_data,\n    confidence_threshold=0.7,\n    minimum_fire_size=0.1,    # km\xb2\n    temporal_persistence=2     # hours\n)\n\n# Extract fire detections\nfire_polygons = results['fire_polygons']\nconfidence_map = results['confidence_map']\nfire_evolution = results['temporal_evolution']\n\nprint(f\"Detected {len(fire_polygons)} fire areas\")\nprint(f\"Total burned area: {results['total_area']:.2f} km\xb2\")\n"})}),"\n",(0,a.jsx)(n.h2,{id:"step-7-results-visualization",children:"Step 7: Results Visualization"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nfrom matplotlib.colors import ListedColormap\n\n# Create visualization\nfig, axes = plt.subplots(2, 2, figsize=(15, 12))\n\n# Plot 1: RGB composite with fire detections\nax1 = axes[0, 0]\nrgb_image = processed_data['rgb_composite']\nax1.imshow(rgb_image)\nfor fire in fire_polygons:\n    poly = patches.Polygon(fire.exterior.coords, \n                          fill=False, edgecolor='red', linewidth=2)\n    ax1.add_patch(poly)\nax1.set_title('RGB Composite with Fire Detections')\nax1.set_xlabel('Longitude')\nax1.set_ylabel('Latitude')\n\n# Plot 2: Confidence map\nax2 = axes[0, 1]\nim2 = ax2.imshow(confidence_map, cmap='hot', vmin=0, vmax=1)\nax2.set_title('Fire Detection Confidence')\nplt.colorbar(im2, ax=ax2, label='Confidence')\n\n# Plot 3: Temporal evolution\nax3 = axes[1, 0]\ntimes = fire_evolution['timestamps']\nareas = fire_evolution['burned_areas']\nax3.plot(times, areas, 'r-', linewidth=2, marker='o')\nax3.set_title('Fire Area Evolution')\nax3.set_xlabel('Time')\nax3.set_ylabel('Burned Area (km\xb2)')\nax3.grid(True, alpha=0.3)\n\n# Plot 4: Multi-sensor comparison\nax4 = axes[1, 1]\nsensor_detections = results['sensor_comparison']\nsensors = list(sensor_detections.keys())\naccuracies = list(sensor_detections.values())\nax4.bar(sensors, accuracies)\nax4.set_title('Detection Accuracy by Sensor')\nax4.set_ylabel('Accuracy Score')\nax4.tick_params(axis='x', rotation=45)\n\nplt.tight_layout()\nplt.show()\n"})}),"\n",(0,a.jsx)(n.h2,{id:"step-8-export-results",children:"Step 8: Export Results"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Export fire polygons to GeoJSON\nimport geopandas as gpd\n\n# Convert to GeoDataFrame\nfire_gdf = gpd.GeoDataFrame(\n    [{'fire_id': i, 'area_km2': poly.area, 'confidence': conf}\n     for i, (poly, conf) in enumerate(zip(fire_polygons, results['confidences']))],\n    geometry=fire_polygons,\n    crs='EPSG:4326'\n)\n\n# Save to file\nfire_gdf.to_file('detected_fires.geojson', driver='GeoJSON')\n\n# Export time series data\nimport pandas as pd\nfire_timeseries = pd.DataFrame({\n    'timestamp': fire_evolution['timestamps'],\n    'burned_area_km2': fire_evolution['burned_areas'],\n    'active_fires': fire_evolution['fire_counts']\n})\nfire_timeseries.to_csv('fire_evolution.csv', index=False)\n\nprint(\"Results exported:\")\nprint(\"  - detected_fires.geojson\")\nprint(\"  - fire_evolution.csv\")\n"})}),"\n",(0,a.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,a.jsx)(n.h3,{id:"real-time-processing",children:"Real-time Processing"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Set up real-time monitoring\nmonitor = wildfire.RealtimeMonitor(\n    aoi=aoi,\n    model=wildfire_model,\n    update_interval=15,  # minutes\n    alert_threshold=0.8\n)\n\n# Start monitoring (runs in background)\nmonitor.start()\n\n# Set up alert callback\ndef fire_alert(detection):\n    print(f\"\ud83d\udd25 FIRE ALERT: {detection['area']:.2f} km\xb2 at {detection['location']}\")\n    # Add your alert logic (email, SMS, etc.)\n\nmonitor.set_alert_callback(fire_alert)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"cross-validation-with-ground-truth",children:"Cross-validation with Ground Truth"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Load validation data (if available)\nground_truth = data_loader.load_ground_truth(\n    aoi=aoi,\n    start_date=start_date,\n    end_date=end_date,\n    source='modis_burned_area'\n)\n\n# Validate results\nvalidation = wildfire_model.validate(\n    predictions=results,\n    ground_truth=ground_truth\n)\n\nprint(f\"Validation metrics:\")\nprint(f\"  Precision: {validation['precision']:.3f}\")\nprint(f\"  Recall: {validation['recall']:.3f}\")\nprint(f\"  F1-Score: {validation['f1_score']:.3f}\")\n"})}),"\n",(0,a.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,a.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Low detection accuracy"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Check cloud coverage in your data"}),"\n",(0,a.jsx)(n.li,{children:"Verify sensor calibration"}),"\n",(0,a.jsx)(n.li,{children:"Adjust confidence threshold"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Missing data"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Ensure valid NASA Earthdata credentials"}),"\n",(0,a.jsx)(n.li,{children:"Check internet connectivity"}),"\n",(0,a.jsx)(n.li,{children:"Verify study area coordinates"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Memory errors"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Reduce spatial resolution"}),"\n",(0,a.jsx)(n.li,{children:"Process smaller time windows"}),"\n",(0,a.jsx)(n.li,{children:"Enable data streaming mode"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Enable performance optimizations\nconfig.optimization.enable_mixed_precision = True\nconfig.optimization.enable_gradient_checkpointing = True\nconfig.optimization.batch_size = 8  # Adjust based on GPU memory\n\n# Use data streaming for large areas\nconfig.data.streaming_mode = True\nconfig.data.chunk_size = '1GB'\n"})}),"\n",(0,a.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Try the ",(0,a.jsx)(n.a,{href:"/SIT_FUSE/docs/tutorials/algal-bloom-analysis",children:"Algal Bloom Detection Tutorial"})]}),"\n",(0,a.jsxs)(n.li,{children:["Learn about ",(0,a.jsx)(n.a,{href:"/SIT_FUSE/docs/tutorials/multi-sensor-fusion",children:"Multi-sensor Fusion"})]}),"\n",(0,a.jsxs)(n.li,{children:["Explore ",(0,a.jsx)(n.a,{href:"/SIT_FUSE/docs/use-cases/environmental-monitoring",children:"Advanced Use Cases"})]}),"\n",(0,a.jsxs)(n.li,{children:["Read about the ",(0,a.jsx)(n.a,{href:"/SIT_FUSE/docs/technical-guide/architecture",children:"Technical Architecture"})]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://modis.gsfc.nasa.gov/data/dataprod/mod14.php",children:"MODIS Fire Products"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://www.earthdata.nasa.gov/earth-observation-data/near-real-time/firms",children:"VIIRS Active Fire Data"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://www.goes-r.gov/products/baseline-fire.html",children:"GOES-R Fire Detection"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/SIT_FUSE/docs/community/publications",children:"Wildfire Detection Paper"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>o});var t=i(6540);const a={},r=t.createContext(a);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);