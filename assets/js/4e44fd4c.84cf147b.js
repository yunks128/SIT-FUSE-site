"use strict";(self.webpackChunksit_fuse_website=self.webpackChunksit_fuse_website||[]).push([[2287],{6274:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"technical-guide/architecture","title":"SIT-FUSE System Architecture","description":"This document outlines the comprehensive architecture of the SIT-FUSE framework, detailing how multi-sensor earth observation data flows through the system for automated environmental monitoring.","source":"@site/docs/technical-guide/architecture.md","sourceDirName":"technical-guide","slug":"/technical-guide/architecture","permalink":"/SIT_FUSE/docs/technical-guide/architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/yunks128/SIT_FUSE/tree/main/docs/docs/technical-guide/architecture.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"model training","permalink":"/SIT_FUSE/docs/api-reference/model-training"},"next":{"title":"algorithms","permalink":"/SIT_FUSE/docs/technical-guide/algorithms"}}');var i=t(4848),a=t(8453);const s={},o="SIT-FUSE System Architecture",c={},l=[{value:"Overview",id:"overview",level:2},{value:"High-Level Architecture",id:"high-level-architecture",level:2},{value:"Data Flow Architecture",id:"data-flow-architecture",level:2},{value:"1. Data Acquisition &amp; Ingestion",id:"1-data-acquisition--ingestion",level:3},{value:"2. Preprocessing Pipeline",id:"2-preprocessing-pipeline",level:3},{value:"Core Machine Learning Framework",id:"core-machine-learning-framework",level:2},{value:"Self-Supervised Learning Engine",id:"self-supervised-learning-engine",level:3},{value:"Multi-Sensor Fusion Framework",id:"multi-sensor-fusion-framework",level:3},{value:"Application-Specific Architectures",id:"application-specific-architectures",level:2},{value:"Wildfire Detection System",id:"wildfire-detection-system",level:3},{value:"Deployment Architecture",id:"deployment-architecture",level:2},{value:"Cloud-Native Deployment",id:"cloud-native-deployment",level:3},{value:"Technology Stack",id:"technology-stack",level:2}];function d(e){const n={h1:"h1",h2:"h2",h3:"h3",header:"header",mermaid:"mermaid",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"sit-fuse-system-architecture",children:"SIT-FUSE System Architecture"})}),"\n",(0,i.jsx)(n.p,{children:"This document outlines the comprehensive architecture of the SIT-FUSE framework, detailing how multi-sensor earth observation data flows through the system for automated environmental monitoring."}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"SIT-FUSE implements a modular, scalable architecture that enables self-supervised learning across heterogeneous satellite sensor data. The system is designed to handle the complexity of multi-sensor fusion while maintaining flexibility for various environmental monitoring applications."}),"\n",(0,i.jsx)(n.h2,{id:"high-level-architecture",children:"High-Level Architecture"}),"\n",(0,i.jsx)(n.mermaid,{value:'graph TB\n    subgraph "Data Sources"\n        MODIS[MODIS Terra/Aqua]\n        Landsat[Landsat 8/9]\n        Sentinel1[Sentinel-1 SAR]\n        Sentinel2[Sentinel-2 MSI]\n        VIIRS[VIIRS/NPP]\n        GOES[GOES-16/17]\n        Other[Other Sensors]\n    end\n    \n    subgraph "Data Ingestion Layer"\n        DI[Data Ingestion API]\n        Cache[Data Cache]\n        Metadata[Metadata Store]\n    end\n    \n    subgraph "Preprocessing Pipeline"\n        GC[Geometric Correction]\n        RC[Radiometric Calibration]\n        AC[Atmospheric Correction]\n        CM[Cloud Masking]\n        QC[Quality Control]\n    end\n    \n    subgraph "Core ML Framework"\n        SSL[Self-Supervised Learning Engine]\n        MSF[Multi-Sensor Fusion]\n        IT[Instance Tracking]\n        CL[Contrastive Learning]\n    end\n    \n    subgraph "Application Layer"\n        WF[Wildfire Detection]\n        AB[Algal Bloom Monitor]\n        LC[Land Change Detection]\n        AT[Atmospheric Tracking]\n        WQ[Water Quality]\n    end\n    \n    subgraph "Output & APIs"\n        REST[REST API]\n        WebUI[Web Interface]\n        Alerts[Alert System]\n        Export[Data Export]\n    end\n    \n    MODIS --\x3e DI\n    Landsat --\x3e DI\n    Sentinel1 --\x3e DI\n    Sentinel2 --\x3e DI\n    VIIRS --\x3e DI\n    GOES --\x3e DI\n    Other --\x3e DI\n    \n    DI --\x3e Cache\n    DI --\x3e Metadata\n    Cache --\x3e GC\n    \n    GC --\x3e RC\n    RC --\x3e AC\n    AC --\x3e CM\n    CM --\x3e QC\n    \n    QC --\x3e SSL\n    SSL --\x3e MSF\n    MSF --\x3e IT\n    IT --\x3e CL\n    \n    CL --\x3e WF\n    CL --\x3e AB\n    CL --\x3e LC\n    CL --\x3e AT\n    CL --\x3e WQ\n    \n    WF --\x3e REST\n    AB --\x3e REST\n    LC --\x3e REST\n    AT --\x3e REST\n    WQ --\x3e REST\n    \n    REST --\x3e WebUI\n    REST --\x3e Alerts\n    REST --\x3e Export'}),"\n",(0,i.jsx)(n.h2,{id:"data-flow-architecture",children:"Data Flow Architecture"}),"\n",(0,i.jsx)(n.p,{children:"The SIT-FUSE system processes satellite data through several distinct stages:"}),"\n",(0,i.jsx)(n.h3,{id:"1-data-acquisition--ingestion",children:"1. Data Acquisition & Ingestion"}),"\n",(0,i.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant Satellite as Satellite Missions\n    participant Archive as Data Archives\n    participant Ingestion as Ingestion API\n    participant Cache as Data Cache\n    participant Processor as Preprocessing\n    \n    Satellite->>Archive: Raw sensor data\n    Archive->>Ingestion: Data request/download\n    Ingestion->>Cache: Store raw data\n    Ingestion->>Processor: Trigger processing\n    Cache->>Processor: Retrieve data\n    Processor->>Cache: Store processed data"}),"\n",(0,i.jsx)(n.h3,{id:"2-preprocessing-pipeline",children:"2. Preprocessing Pipeline"}),"\n",(0,i.jsx)(n.mermaid,{value:"flowchart LR\n    Raw[Raw Sensor Data] --\x3e GeoCorrect[Geometric Correction]\n    GeoCorrect --\x3e RadCal[Radiometric Calibration]\n    RadCal --\x3e AtmCorr[Atmospheric Correction]\n    AtmCorr --\x3e CloudMask[Cloud Masking]\n    CloudMask --\x3e QualityCheck[Quality Assessment]\n    QualityCheck --\x3e Harmonize[Data Harmonization]\n    Harmonize --\x3e Ready[Analysis-Ready Data]\n    \n    style Raw fill:#f9d71c\n    style Ready fill:#27ae60"}),"\n",(0,i.jsx)(n.h2,{id:"core-machine-learning-framework",children:"Core Machine Learning Framework"}),"\n",(0,i.jsx)(n.h3,{id:"self-supervised-learning-engine",children:"Self-Supervised Learning Engine"}),"\n",(0,i.jsx)(n.mermaid,{value:'graph TD\n    subgraph "Input Data"\n        T1[Time t-1]\n        T2[Time t]\n        T3[Time t+1]\n        S1[Sensor A]\n        S2[Sensor B]\n        S3[Sensor C]\n    end\n    \n    subgraph "Feature Extraction"\n        FE[Feature Encoder]\n        TE[Temporal Encoder]\n        SE[Spatial Encoder]\n    end\n    \n    subgraph "Self-Supervised Tasks"\n        CR[Contrastive Learning]\n        TP[Temporal Prediction]\n        SR[Spatial Reconstruction]\n        CS[Cross-Sensor Alignment]\n    end\n    \n    subgraph "Learned Representations"\n        GR[Global Representations]\n        LR[Local Representations]\n        TR[Temporal Representations]\n    end\n    \n    T1 & T2 & T3 --\x3e TE\n    S1 & S2 & S3 --\x3e SE\n    T2 --\x3e FE\n    \n    FE --\x3e CR\n    TE --\x3e TP\n    SE --\x3e SR\n    FE --\x3e CS\n    \n    CR --\x3e GR\n    TP --\x3e TR\n    SR --\x3e LR\n    CS --\x3e GR'}),"\n",(0,i.jsx)(n.h3,{id:"multi-sensor-fusion-framework",children:"Multi-Sensor Fusion Framework"}),"\n",(0,i.jsx)(n.mermaid,{value:'graph LR\n    subgraph "Sensor Inputs"\n        Optical[Optical Sensors<br/>Landsat, Sentinel-2]\n        Thermal[Thermal Sensors<br/>MODIS, VIIRS]\n        Radar[Radar Sensors<br/>Sentinel-1]\n        Geo[Geostationary<br/>GOES, Himawari]\n    end\n    \n    subgraph "Fusion Strategies"\n        Early[Early Fusion<br/>Raw Data Level]\n        Feature[Feature Fusion<br/>Feature Level]\n        Decision[Decision Fusion<br/>Output Level]\n    end\n    \n    subgraph "Alignment Methods"\n        Temporal[Temporal Alignment]\n        Spatial[Spatial Registration]\n        Spectral[Spectral Harmonization]\n    end\n    \n    subgraph "Output Products"\n        Unified[Unified Data Products]\n        Enhanced[Enhanced Information]\n        Validated[Cross-Validated Results]\n    end\n    \n    Optical --\x3e Early\n    Thermal --\x3e Early\n    Radar --\x3e Feature\n    Geo --\x3e Decision\n    \n    Early --\x3e Temporal\n    Feature --\x3e Spatial\n    Decision --\x3e Spectral\n    \n    Temporal --\x3e Unified\n    Spatial --\x3e Enhanced\n    Spectral --\x3e Validated'}),"\n",(0,i.jsx)(n.h2,{id:"application-specific-architectures",children:"Application-Specific Architectures"}),"\n",(0,i.jsx)(n.h3,{id:"wildfire-detection-system",children:"Wildfire Detection System"}),"\n",(0,i.jsx)(n.mermaid,{value:'graph TB\n    subgraph "Data Inputs"\n        TIR[Thermal Infrared<br/>MODIS/VIIRS]\n        SWIR[Short-wave Infrared<br/>Landsat/Sentinel-2]\n        VIS[Visible Bands<br/>True Color]\n        MET[Meteorological Data<br/>Wind, Humidity]\n    end\n    \n    subgraph "Processing Modules"\n        HTD[Hot Spot Detection]\n        STD[Smoke Detection]\n        CTX[Context Analysis]\n        VAL[Validation Filter]\n    end\n    \n    subgraph "Fire Characterization"\n        FRP[Fire Radiative Power]\n        BA[Burned Area]\n        SP[Smoke Plume]\n        DIR[Fire Direction]\n    end\n    \n    subgraph "Outputs"\n        Alerts[Fire Alerts]\n        Maps[Fire Maps]\n        Reports[Assessment Reports]\n        API[Real-time API]\n    end\n    \n    TIR --\x3e HTD\n    SWIR --\x3e HTD\n    VIS --\x3e STD\n    MET --\x3e CTX\n    \n    HTD --\x3e VAL\n    STD --\x3e VAL\n    CTX --\x3e VAL\n    \n    VAL --\x3e FRP\n    VAL --\x3e BA\n    VAL --\x3e SP\n    VAL --\x3e DIR\n    \n    FRP --\x3e Alerts\n    BA --\x3e Maps\n    SP --\x3e Reports\n    DIR --\x3e API'}),"\n",(0,i.jsx)(n.h2,{id:"deployment-architecture",children:"Deployment Architecture"}),"\n",(0,i.jsx)(n.h3,{id:"cloud-native-deployment",children:"Cloud-Native Deployment"}),"\n",(0,i.jsx)(n.mermaid,{value:'graph TB\n    subgraph "User Interface"\n        Web[Web Dashboard]\n        Mobile[Mobile App]\n        API_Client[API Clients]\n    end\n    \n    subgraph "API Gateway"\n        Gateway[Load Balancer<br/>API Gateway]\n    end\n    \n    subgraph "Application Services"\n        Auth[Authentication Service]\n        Processing[Processing Service]\n        Monitoring[Monitoring Service]\n        Notification[Alert Service]\n    end\n    \n    subgraph "Data Services"\n        Database[(Primary Database)]\n        Cache[(Redis Cache)]\n        Queue[Message Queue]\n        Storage[(Object Storage)]\n    end\n    \n    subgraph "Processing Infrastructure"\n        K8s[Kubernetes Cluster]\n        GPU[GPU Nodes]\n        CPU[CPU Nodes]\n        Scheduler[Job Scheduler]\n    end\n    \n    subgraph "External Services"\n        NASA[NASA Earthdata]\n        ESA[ESA Copernicus]\n        NOAA[NOAA Archives]\n        Weather[Weather APIs]\n    end\n    \n    Web --\x3e Gateway\n    Mobile --\x3e Gateway\n    API_Client --\x3e Gateway\n    \n    Gateway --\x3e Auth\n    Gateway --\x3e Processing\n    Gateway --\x3e Monitoring\n    Gateway --\x3e Notification\n    \n    Auth --\x3e Database\n    Processing --\x3e Cache\n    Processing --\x3e Queue\n    Monitoring --\x3e Storage\n    \n    Queue --\x3e K8s\n    K8s --\x3e GPU\n    K8s --\x3e CPU\n    K8s --\x3e Scheduler\n    \n    Processing --\x3e NASA\n    Processing --\x3e ESA\n    Processing --\x3e NOAA\n    Processing --\x3e Weather'}),"\n",(0,i.jsx)(n.h2,{id:"technology-stack",children:"Technology Stack"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Layer"}),(0,i.jsx)(n.th,{children:"Technologies"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Frontend"})}),(0,i.jsx)(n.td,{children:"React, TypeScript, Material-UI"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Backend"})}),(0,i.jsx)(n.td,{children:"Python, FastAPI, AsyncIO"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"ML Framework"})}),(0,i.jsx)(n.td,{children:"PyTorch, Lightning, Weights & Biases"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Data Processing"})}),(0,i.jsx)(n.td,{children:"Apache Spark, Dask, NumPy"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Databases"})}),(0,i.jsx)(n.td,{children:"PostgreSQL, Redis, MongoDB"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Message Queue"})}),(0,i.jsx)(n.td,{children:"Apache Kafka, RabbitMQ"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Orchestration"})}),(0,i.jsx)(n.td,{children:"Kubernetes, Docker, Helm"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Monitoring"})}),(0,i.jsx)(n.td,{children:"Prometheus, Grafana, Jaeger"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Storage"})}),(0,i.jsx)(n.td,{children:"AWS S3, MinIO, HDFS"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"CI/CD"})}),(0,i.jsx)(n.td,{children:"GitHub Actions, ArgoCD"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"This architecture ensures SIT-FUSE can scale from research prototype to production-ready environmental monitoring system while maintaining flexibility for diverse applications and sensor configurations."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(6540);const i={},a=r.createContext(i);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);